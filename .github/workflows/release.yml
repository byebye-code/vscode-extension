name: Build and Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Get current version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} does not exist"
          fi
      
      - name: Compile TypeScript
        if: steps.check_tag.outputs.exists == 'false'
        run: npm run compile-no-bump
      
      - name: Package extension
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          npm install -g @vscode/vsce
          vsce package
      
      - name: Create Git tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"
      
      - name: Generate release notes
        if: steps.check_tag.outputs.exists == 'false'
        id: release_notes
        run: |
          # 获取上一个 tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # 如果没有上一个 tag，获取所有提交
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # 获取两个 tag 之间的提交
            COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # 创建 release notes
          cat > release_notes.md << EOF
          ## 🚀 88Code VSCode 插件 v${{ steps.get_version.outputs.version }}
          
          ### 📝 更新内容
          
          ${COMMITS}
          
          ### 📦 安装方式
          
          1. 下载 \`.vsix\` 文件
          2. 在 VS Code 中按 \`Ctrl+Shift+P\` (Windows/Linux) 或 \`Cmd+Shift+P\` (macOS)
          3. 输入 "Install from VSIX"
          4. 选择下载的 .vsix 文件
          
          ### 🔗 相关链接
          
          - [GitHub 仓库](https://github.com/byebye-code/vscode-extension)
          - [88Code 官网](https://88code.org)
          EOF
          
          cat release_notes.md
      
      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: v${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            *.vsix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Skip release (tag exists)
        if: steps.check_tag.outputs.exists == 'true'
        run: |
          echo "⚠️ Tag v${{ steps.get_version.outputs.version }} already exists, skipping release"
          echo "Please bump version in package.json to create a new release"
